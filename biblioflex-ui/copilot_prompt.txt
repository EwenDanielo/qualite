/************************************************************
 * ðŸ“š BiblioFlex-UI â€“ SpÃ©cification complÃ¨te (Angular 17)
 *
 * Objectif : gÃ©nÃ©rer tout le front dâ€™une appli de gestion
 * de prÃªts de livres â€“ compatible Spring Boot API + JWT.
 * Merci de produire le code, la structure de dossiers et
 * les tests unitaires en suivant les directives ci-dessous.
 *
 * 1. Initialisation
 *    - Projet standalone Angular 17 : `ng new biblioflex-ui
 *      --standalone --routing --style=scss`
 *    - Gestion dâ€™Ã©tat RxJS (pas NgRx).
 *    - Styles globaux via SCSS + Angular Material.
 *
 * 2. Arborescence souhaitÃ©e
 *    src/
 *      app/
 *        core/            â†’ AuthService, ApiService, JwtInterceptor,
 *                           AuthGuard, http-error.interceptor.ts
 *        shared/          â†’ ui/ (Button, Card, Modal) + pipes/
 *        features/
 *          books/
 *            book-list/   â†’ BookListComponent (mat-table + paginator)
 *            book-card/   â†’ BookCardComponent
 *            book-form/   â†’ BookFormComponent (ReactiveForms)
 *          loans/
 *            loan-dashboard/ â†’ LoanDashboardComponent
 *          auth/
 *            login/       â†’ LoginComponent
 *            register/    â†’ RegisterComponent
 *
 * 3. ModÃ¨les TypeScript
 *    export interface Book { id?:number; title:string; author:string;
 *      isbn:string; stock:number; }
 *    export interface User { id?:number; email:string; password?:string;
 *      role:'USER'|'ADMIN'; }
 *    export interface Loan { id?:number; book:Book; user:User;
 *      dueDate:string; returnedAt?:string; }
 *
 * 4. Routing
 *    - ''              â†’ redirectTo 'books'
 *    - 'books'         â†’ BookListComponent (AuthGuard)
 *    - 'books/new'     â†’ BookFormComponent  (AuthGuard, admin)
 *    - 'loans'         â†’ LoanDashboardComponent (AuthGuard)
 *    - 'login'         â†’ LoginComponent
 *    - 'register'      â†’ RegisterComponent
 *
 * 5. Services
 *    ApiService        â†’ wrappe HttpClient, gÃ¨re apiBaseUrl des env.
 *    AuthService       â†’ login(), register(), logout(), currentUser$ (BehaviorSubject)
 *    BookService       â†’ CRUD livres (DTO â†” modÃ¨le)
 *    LoanService       â†’ CRUD prÃªts, retour, retard
 *
 * 6. SÃ©curitÃ© cÃ´tÃ© front
 *    - JwtInterceptor : ajoute `Authorization: Bearer <token>`
 *      si token prÃ©sent dans localStorage.
 *    - AuthGuard : bloque routes privÃ©es si !token ou expirÃ©.
 *
 * 7. UI / Angular Material
 *    - Palette : primary #3f51b5, accent #ff4081, warn #f44336.
 *    - mat-toolbar, mat-sidenav, mat-card, mat-table, mat-form-field,
 *      mat-input, mat-icon, mat-button, mat-dialog.
 *
 * 8. Tests (Jest)
 *    - Config Jest + @testing-library/angular (voir jest.config.js).
 *    - Au moins un test par service + un test snapshot par composant.
 *
 * 9. Linting / QualitÃ©
 *    - ESLint (Angular preset) + sonar-scanner comment block Ã  gÃ©nÃ©rer.
 *
 * 10. Bonus (facultatif mais apprÃ©ciÃ©)
 *    - Pipe `truncate` (texte limitÃ©, ellipsis).
 *    - Directive `hasRole` pour cacher certains boutons admin.
 *    - Service `FakeBackendInterceptor` (dev mode) si API down.
 *
 * Merci de gÃ©nÃ©rer :
 *    â€¢ Tous fichiers .ts/.scss/.html respectant cette structure.
 *    â€¢ Un README.md avec instructions `npm install && ng serve`.
 *    â€¢ Un fichier environment.ts contenant `apiBaseUrl`.
 *    â€¢ Exemples de donnÃ©es factices (book-mock.tsâ€¦) pour dev.
 ************************************************************/